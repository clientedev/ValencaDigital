// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
import { randomUUID } from "crypto";
var MemStorage = class {
  users;
  blogPosts;
  blogLikes;
  constructor() {
    this.users = /* @__PURE__ */ new Map();
    this.blogPosts = /* @__PURE__ */ new Map();
    this.blogLikes = /* @__PURE__ */ new Map();
    this.initializeSampleData();
  }
  initializeSampleData() {
    const samplePosts = [
      {
        id: "1",
        title: "Novas Regras do Trabalho Remoto: O que sua Empresa Precisa Saber",
        content: `
<p>Com as mudan\xE7as na legisla\xE7\xE3o trabalhista, o trabalho remoto ganhou novas regulamenta\xE7\xF5es que impactam diretamente empresas e funcion\xE1rios. Este artigo analisa as principais altera\xE7\xF5es e suas implica\xE7\xF5es pr\xE1ticas.</p>

<h3>Principais Mudan\xE7as</h3>
<p>A Lei 14.442/2022 trouxe importantes modifica\xE7\xF5es na CLT, estabelecendo regras espec\xEDficas para o trabalho remoto, incluindo:</p>
<ul>
<li>Defini\xE7\xE3o clara de trabalho remoto vs. home office</li>
<li>Responsabilidades sobre equipamentos e infraestrutura</li>
<li>Controle de jornada e direito \xE0 desconex\xE3o</li>
<li>Pol\xEDticas de reembolso de despesas</li>
</ul>

<h3>Impactos para Empresas</h3>
<p>As organiza\xE7\xF5es precisam se adaptar \xE0s novas exig\xEAncias, incluindo a elabora\xE7\xE3o de pol\xEDticas internas claras e a implementa\xE7\xE3o de controles adequados.</p>
        `,
        excerpt: "An\xE1lise completa das mudan\xE7as na legisla\xE7\xE3o trabalhista para modalidade home office e trabalho h\xEDbrido.",
        category: "Direito do Trabalho",
        imageUrl: "https://images.unsplash.com/photo-1556157382-97eda2d62296?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
        likes: 24,
        readTime: "5 min",
        published: true,
        createdAt: /* @__PURE__ */ new Date("2024-12-15T10:00:00Z"),
        updatedAt: /* @__PURE__ */ new Date("2024-12-15T10:00:00Z")
      },
      {
        id: "2",
        title: "Aposentadoria Especial: Guia Completo para Profissionais da Sa\xFAde",
        content: `
<p>A aposentadoria especial \xE9 um benef\xEDcio previdenci\xE1rio destinado aos trabalhadores expostos a agentes nocivos \xE0 sa\xFAde. Para profissionais da \xE1rea da sa\xFAde, existem crit\xE9rios espec\xEDficos que precisam ser observados.</p>

<h3>Requisitos Essenciais</h3>
<p>Para ter direito \xE0 aposentadoria especial, o profissional de sa\xFAde deve comprovar:</p>
<ul>
<li>Tempo de contribui\xE7\xE3o espec\xEDfico (25 anos para a maioria dos casos)</li>
<li>Exposi\xE7\xE3o permanente aos agentes nocivos</li>
<li>Documenta\xE7\xE3o adequada (PPP, LTCAT, etc.)</li>
</ul>

<h3>Documenta\xE7\xE3o Necess\xE1ria</h3>
<p>A documenta\xE7\xE3o \xE9 fundamental para o sucesso do pedido. Inclui laudos t\xE9cnicos, perfil profissiogr\xE1fico e comprova\xE7\xE3o da exposi\xE7\xE3o aos riscos.</p>
        `,
        excerpt: "Entenda os requisitos e documenta\xE7\xF5es necess\xE1rias para conquistar sua aposentadoria especial.",
        category: "Direito Previdenci\xE1rio",
        imageUrl: "https://images.unsplash.com/photo-1589994965851-a8f479c573a9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
        likes: 31,
        readTime: "8 min",
        published: true,
        createdAt: /* @__PURE__ */ new Date("2024-12-12T14:30:00Z"),
        updatedAt: /* @__PURE__ */ new Date("2024-12-12T14:30:00Z")
      },
      {
        id: "3",
        title: "Div\xF3rcio Consensual: Passo a Passo para um Processo Mais R\xE1pido",
        content: `
<p>O div\xF3rcio consensual \xE9 uma modalidade que permite a dissolu\xE7\xE3o do casamento de forma mais \xE1gil e menos conflituosa, quando h\xE1 acordo entre os c\xF4njuges sobre todos os aspectos da separa\xE7\xE3o.</p>

<h3>Vantagens do Div\xF3rcio Consensual</h3>
<ul>
<li>Processo mais r\xE1pido e econ\xF4mico</li>
<li>Menor desgaste emocional</li>
<li>Maior controle sobre as decis\xF5es</li>
<li>Possibilidade de realiza\xE7\xE3o em cart\xF3rio</li>
</ul>

<h3>Requisitos Necess\xE1rios</h3>
<p>Para optar pelo div\xF3rcio consensual, \xE9 necess\xE1rio que os c\xF4njuges estejam em acordo sobre:</p>
<ul>
<li>Divis\xE3o dos bens</li>
<li>Guarda dos filhos menores</li>
<li>Pens\xE3o aliment\xEDcia</li>
<li>Outras quest\xF5es patrimoniais</li>
</ul>
        `,
        excerpt: "Conhe\xE7a as vantagens do div\xF3rcio consensual e como tornar o processo mais \xE1gil e menos desgastante.",
        category: "Direito de Fam\xEDlia e Sucess\xE3o",
        imageUrl: "https://images.unsplash.com/photo-1582213782179-e0d53f98f2ca?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
        likes: 18,
        readTime: "6 min",
        published: true,
        createdAt: /* @__PURE__ */ new Date("2024-12-10T09:15:00Z"),
        updatedAt: /* @__PURE__ */ new Date("2024-12-10T09:15:00Z")
      }
    ];
    samplePosts.forEach((post) => {
      this.blogPosts.set(post.id, post);
    });
  }
  async getUser(id) {
    return this.users.get(id);
  }
  async getUserByUsername(username) {
    return Array.from(this.users.values()).find(
      (user) => user.username === username
    );
  }
  async createUser(insertUser) {
    const id = randomUUID();
    const user = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
  async getBlogPosts(category) {
    const posts = Array.from(this.blogPosts.values()).filter((post) => post.published).filter((post) => !category || post.category === category).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
    return posts;
  }
  async getBlogPost(id) {
    return this.blogPosts.get(id);
  }
  async createBlogPost(insertPost) {
    const id = randomUUID();
    const now = /* @__PURE__ */ new Date();
    const post = {
      ...insertPost,
      id,
      likes: 0,
      imageUrl: insertPost.imageUrl || null,
      createdAt: now,
      updatedAt: now
    };
    this.blogPosts.set(id, post);
    return post;
  }
  async updateBlogPost(id, updateData) {
    const existing = this.blogPosts.get(id);
    if (!existing) return void 0;
    const updated = {
      ...existing,
      ...updateData,
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.blogPosts.set(id, updated);
    return updated;
  }
  async deleteBlogPost(id) {
    return this.blogPosts.delete(id);
  }
  async getBlogLike(postId, sessionId) {
    const key = `${postId}-${sessionId}`;
    return this.blogLikes.get(key);
  }
  async createBlogLike(insertLike) {
    const id = randomUUID();
    const like = {
      ...insertLike,
      id,
      createdAt: /* @__PURE__ */ new Date()
    };
    const key = `${insertLike.postId}-${insertLike.sessionId}`;
    this.blogLikes.set(key, like);
    const post = this.blogPosts.get(insertLike.postId);
    if (post) {
      post.likes += 1;
      this.blogPosts.set(insertLike.postId, post);
    }
    return like;
  }
  async deleteBlogLike(postId, sessionId) {
    const key = `${postId}-${sessionId}`;
    const deleted = this.blogLikes.delete(key);
    if (deleted) {
      const post = this.blogPosts.get(postId);
      if (post && post.likes > 0) {
        post.likes -= 1;
        this.blogPosts.set(postId, post);
      }
    }
    return deleted;
  }
  async getBlogLikeCount(postId) {
    return Array.from(this.blogLikes.values()).filter((like) => like.postId === postId).length;
  }
};
var storage = new MemStorage();

// shared/schema.ts
import { sql } from "drizzle-orm";
import { pgTable, text, varchar, timestamp, integer, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  password: text("password").notNull()
});
var blogPosts = pgTable("blog_posts", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  title: text("title").notNull(),
  content: text("content").notNull(),
  excerpt: text("excerpt").notNull(),
  category: text("category").notNull(),
  imageUrl: text("image_url"),
  likes: integer("likes").default(0).notNull(),
  readTime: text("read_time").notNull(),
  published: boolean("published").default(true).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull()
});
var blogLikes = pgTable("blog_likes", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  postId: varchar("post_id").notNull().references(() => blogPosts.id, { onDelete: "cascade" }),
  sessionId: text("session_id").notNull(),
  // Using session ID instead of user ID for anonymous likes
  createdAt: timestamp("created_at").defaultNow().notNull()
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true
});
var insertBlogPostSchema = createInsertSchema(blogPosts).omit({
  id: true,
  likes: true,
  createdAt: true,
  updatedAt: true
});
var insertBlogLikeSchema = createInsertSchema(blogLikes).omit({
  id: true,
  createdAt: true
});

// server/routes.ts
import { z } from "zod";
async function registerRoutes(app2) {
  app2.get("/api/blog", async (req, res) => {
    try {
      const category = req.query.category;
      const posts = await storage.getBlogPosts(category);
      res.json(posts);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch blog posts" });
    }
  });
  app2.get("/api/blog/:id", async (req, res) => {
    try {
      const post = await storage.getBlogPost(req.params.id);
      if (!post) {
        return res.status(404).json({ error: "Blog post not found" });
      }
      res.json(post);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch blog post" });
    }
  });
  app2.post("/api/blog", async (req, res) => {
    try {
      const validatedData = insertBlogPostSchema.parse(req.body);
      const post = await storage.createBlogPost(validatedData);
      res.status(201).json(post);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid blog post data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to create blog post" });
    }
  });
  app2.put("/api/blog/:id", async (req, res) => {
    try {
      const validatedData = insertBlogPostSchema.partial().parse(req.body);
      const post = await storage.updateBlogPost(req.params.id, validatedData);
      if (!post) {
        return res.status(404).json({ error: "Blog post not found" });
      }
      res.json(post);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid blog post data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to update blog post" });
    }
  });
  app2.delete("/api/blog/:id", async (req, res) => {
    try {
      const deleted = await storage.deleteBlogPost(req.params.id);
      if (!deleted) {
        return res.status(404).json({ error: "Blog post not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: "Failed to delete blog post" });
    }
  });
  app2.post("/api/blog/:id/like", async (req, res) => {
    try {
      const postId = req.params.id;
      const sessionId = req.body.sessionId || "anonymous";
      const existingLike = await storage.getBlogLike(postId, sessionId);
      if (existingLike) {
        return res.status(400).json({ error: "Already liked this post" });
      }
      const like = await storage.createBlogLike({ postId, sessionId });
      const likeCount = await storage.getBlogLikeCount(postId);
      res.json({ like, likeCount });
    } catch (error) {
      res.status(500).json({ error: "Failed to like post" });
    }
  });
  app2.delete("/api/blog/:id/like", async (req, res) => {
    try {
      const postId = req.params.id;
      const sessionId = req.body.sessionId || "anonymous";
      const deleted = await storage.deleteBlogLike(postId, sessionId);
      if (!deleted) {
        return res.status(404).json({ error: "Like not found" });
      }
      const likeCount = await storage.getBlogLikeCount(postId);
      res.json({ likeCount });
    } catch (error) {
      res.status(500).json({ error: "Failed to unlike post" });
    }
  });
  app2.get("/api/blog/:id/like-status", async (req, res) => {
    try {
      const postId = req.params.id;
      const sessionId = req.query.sessionId || "anonymous";
      const like = await storage.getBlogLike(postId, sessionId);
      const likeCount = await storage.getBlogLikeCount(postId);
      res.json({
        liked: !!like,
        likeCount
      });
    } catch (error) {
      res.status(500).json({ error: "Failed to get like status" });
    }
  });
  app2.post("/api/admin/auth", (req, res) => {
    const { password } = req.body;
    if (password === "v") {
      res.json({ success: true, message: "Authentication successful" });
    } else {
      res.status(401).json({ success: false, message: "Invalid password" });
    }
  });
  app2.post("/api/contact", (req, res) => {
    try {
      const { name, email, phone, area, message } = req.body;
      console.log("Contact form submission:", { name, email, phone, area, message });
      res.json({ success: true, message: "Mensagem enviada com sucesso! Entraremos em contato em breve." });
    } catch (error) {
      res.status(500).json({ error: "Failed to send message" });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();